name: 'Deploy Docker to AWS (EC2)'
description: 'Deploy a Docker app to an AWS Virtual Machine (EC2) with Docker Compose'
branding:
  icon: upload-cloud
  color: red
inputs:
  checkout:
    description: 'Specifies if this action should checkout the code'
    required: false
    default: 'true'
  aws_access_key_id:
    description: 'AWS access key ID'
    required: true
  aws_secret_access_key:
    description: 'AWS secret access key'
    required: true
  aws_session_token:
    description: 'AWS session token'
    required: false
  aws_default_region:
    description: 'AWS default region'
    required: true
    default: 'us-east-1'
  tf_state_bucket:
    description: 'AWS S3 bucket to use for Terraform state. Defaults to `${org}-${repo}-{branch}-tf-state`. Will be deleted with stack_destroy.'
    required: false
  dot_env:
    description: '`.env` file to be used with the app'
    required: false
  app_port:
    description: 'Port to expose for the app'
    required: false
    default: '80'
  lb_port:
    description: 'Load balancer listening port. Defaults to 80 if NO FQDN provided, 443 if FQDN provided'
    required: false
  lb_healthcheck: 
    description: 'Load balancer health check string. Defaults to HTTP:app_port'
    required: false
  ec2_instance_profile:
    description: 'The AWS IAM instance profile to use for the EC2 instance'
  stack_destroy:
    description: 'Set to "true" to Destroy the stack. Will delete tf_state_bucket after destroy.'
  aws_resource_identifier:
    description: 'Set to override the AWS resource identifier for the deployment.  Defaults to `${org}-{repo}-{branch}`.  Use with destroy to destroy specific resources.'
  domain_name:
    description: 'Define the root domain name for the application. e.g. app.com'
    required: true
  sub_domain:
    description: 'Define the sub-domain part of the URL. Defaults to `${org}-${repo}-{branch}`'
  app_directory:
    description: 'Relative path for the directory of the app (i.e. where `Dockerfile` and `docker-compose.yaml` files are located). This is the directory that is copied to the EC2 instance.  Default is the root of the repo.'
  additional_tags:
    description: 'A list of additional tags that will be included on created resources. Example: `{"key1": "value1", "key2": "value2"}`'
    required: false
    default: '{}'
outputs:
  vm_url:
    description: "The URL of the generated app"
    value: ${{ steps.deploy.outputs.vm_url }}

runs:
  using: 'composite'
  steps:
    - name: Checkout if required
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v3

    - name: Deploy with BitOps
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        BITOPS_ENVIRONMENT: deployment
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_SESSION_TOKEN: ${{ inputs.aws_session_token }}
        AWS_DEFAULT_REGION: ${{ inputs.aws_default_region }}
        TF_STATE_BUCKET: ${{ inputs.tf_state_bucket }}
        DOT_ENV: ${{ inputs.dot_env }}
        APP_PORT: ${{ inputs.app_port }}
        LB_PORT: ${{ inputs.lb_port }}
        LB_HEALTHCHECK: ${{ inputs.lb_healthcheck }}
        EC2_INSTANCE_PROFILE: ${{ inputs.ec2_instance_profile }}
        STACK_DESTROY: ${{ inputs.stack_destroy }}
        AWS_RESOURCE_IDENTIFIER: ${{ inputs.aws_resource_identifier }}
        DOMAIN_NAME: ${{ inputs.domain_name }}
        SUB_DOMAIN: ${{ inputs.sub_domain }}
        BITOPS_FAST_FAIL: true
        APP_DIRECTORY: ${{ inputs.app_directory }}
        ADDITIONAL_TAGS: ${{ inputs.additional_tags }}
      run: |
        echo "running operations/_scripts/deploy/deploy.sh"
        $GITHUB_ACTION_PATH/operations/_scripts/deploy/deploy.sh
